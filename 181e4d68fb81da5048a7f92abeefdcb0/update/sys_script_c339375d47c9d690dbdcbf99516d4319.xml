<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>task</collection>
        <condition>current.correlation_display.changesTo(SCCConstants.DEFAULT_CORRELATION_DISPLAY);</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="task">correlation_idVALCHANGES^correlation_idISNOTEMPTY^active=true^EQ<item endquery="false" field="correlation_id" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="false" field="correlation_id" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="false" field="active" goto="false" newquery="false" operator="=" or="false" value="true"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>eBond Historical Activity</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
	
	const sccAPI = new SCCTask(current);

	const journalRecord = new global.GlideQuery(SCCConstants.TABLES.JOURNAL)
		.where("element_id", current.getUniqueValue())
		.orderBy("sys_created_on")
		.toGlideRecord();

	journalRecord.query();

	while (journalRecord.next()) {
		if (journalRecord.getValue("element") === "work_notes") {
			sccAPI.bondNewNote(journalRecord);
		} else {
			sccAPI.bondNewComment(journalRecord);
		}
	}

	const attachmentRecord = new global.GlideQuery(SCCConstants.TABLES.ATTACHMENT)
		.where("table_sys_id", current.getUniqueValue())
		.orderBy("sys_created_on")
		.toGlideRecord();

	attachmentRecord.query();

	while (attachmentRecord.next()) {
		sccAPI.bondNewAttachment(attachmentRecord);
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>Lucas.Guerino@crossfuze.com</sys_created_by>
        <sys_created_on>2024-10-04 09:04:33</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c339375d47c9d690dbdcbf99516d4319</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>eBond Historical Activity</sys_name>
        <sys_overrides/>
        <sys_package display_value="SCC Integration" source="x_tipts_scc_integr">181e4d68fb81da5048a7f92abeefdcb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="SCC Integration">181e4d68fb81da5048a7f92abeefdcb0</sys_scope>
        <sys_update_name>sys_script_c339375d47c9d690dbdcbf99516d4319</sys_update_name>
        <sys_updated_by>Lucas.Guerino@crossfuze.com</sys_updated_by>
        <sys_updated_on>2024-10-14 09:40:05</sys_updated_on>
        <template/>
        <when>async_always</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=c339375d47c9d690dbdcbf99516d4319"/>
</record_update>
